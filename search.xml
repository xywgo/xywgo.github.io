<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2020/08/20/git-xue-xi-bi-ji/"/>
      <url>/2020/08/20/git-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介">Git简介</h2><p><a href="https://git-scm.com/">Git</a>是目前世界上最先进的分布式<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>版本控制系统<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><h2 id="安装Git">安装Git</h2><p>参考官方下载安装地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="常用命令">常用命令</h2><pre class=" language-language-bash"><code class="language-language-bash"># 创建版本库（repository)# 将当前目录变成git管理的仓库# 会在目录下生成一个隐藏的.git目录用于跟踪管理当前仓库git init <repositoryname># 将文件添加到仓库，需文件已经存在于目录中git add [文件名]...# 将文件提交到仓库, -m后为说明，可以随便写git commit -m 'message'# 查看文件变更内容git diff [文件名]# 查看工作区的状况git status# 查看历史版本记录git log# 简化输出git log --pretty=oneline# 退回到某个版本# HEAD^（^）表示上（上）一个版本git reset --hard commit ID# 如不记得commit id 可通过下面命令查看历史命令得到git reflog# 删除文件# 通过其他方式删除的文件也要执行下面命令在git版本库中删除git rm file#删除后还需要再commit#如果删错了，并且还没提交到版本库里（版本库里还有）可以通过下面命令恢复。git checkout -- filename</code></pre><h2 id="工作区和暂存区">工作区和暂存区</h2><p>工作区（Working Directory)就是git管理的可见的当前目录。而隐藏的.git目录就是版本库（Repository).</p><p>版本库中包含的很重要的一部分就是暂存区（stage/index).还有就是master分支及其指针（HEAD)。</p><p><img src="https://i.loli.net/2020/08/20/G6uhk45VLrlceXD.jpg" alt="0"></p><p><code>git add</code> 命令就是把文件修改提交到暂存区，<code>git commit</code>就是把暂存区的所有内容提交到当前分支。</p><p>Git跟踪并管理的是修改，而非文件。</p><pre class=" language-language-bash"><code class="language-language-bash"># 查看工作区与版本库中文件的区别git diff HEAD -- 文件名</code></pre><h2 id="远程仓库">远程仓库</h2><pre class=" language-language-bash"><code class="language-language-bash"># 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git# 关联后第一次推送git push -u origin master#之后推送git push origin master# 从远程库克隆git clone git@server-name:path/repo-name.git# 查看远程仓库信息git remote# 查看更详细的信息git remote -v# 推送分支# 如果失败，先用git pull抓取远程的新提交git push origin branch-name# 在本地创建和远程对应的分支，使用git checkout -b branch-name origin/brance-name# 建立本地分支与远程分支的关联git branch --set-upstream branch-name origin/branch-name# 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突# rebase操作可以把本地未push的分叉提交历史整理成直线git rebase</code></pre><h2 id="分支管理">分支管理</h2><pre class=" language-language-bash"><code class="language-language-bash"># 查看分支git branch# 创建分支git branch <name># 切换分支 2种命令效果一样git checkout <name> git switch <name># 创建并切换分支 下面2个命令效果一样git checkout -b <name> git switch -c <name># 合并某分支到当前分支git merge <name># 删除分支git branch -d <name># 丢弃一个没有合并过的分支git branch -D <name># 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。# 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。# 用下面命令可以查看分支合并图git log --graph# 通常Git默认会采用Fast forward模式进行合并，但这样会丢掉分支信息。# 可以在合并时通过下面的参数禁用Fast forward模式采用普通模式，保留分支信息。# 通过普通模式会创建一个新的commit,所以还需要添加-m参数及说明信息git merge --no-ff -m 'massage'# 当某个分支的工作还没完成（还不能提交）但需去其他分支工作时可以用下面命令暂存工作现场git stash# 需要从暂存区恢复的命令git stash pop# 要把其他分支的修改（如Bug修复），同步应用的当前工作分支.git cherry-pick <commit id></code></pre><h2 id="标签管理">标签管理</h2><pre class=" language-language-bash"><code class="language-language-bash"># 新建一个标签，默认是HEAD，也可以指定一个commit idgit tag <tagname># 指定标签信息git tag -a <tagname> -m 'blablabla'# 查看所有标签git tag# 查看标签信息git show <tagname># 推送一个本地标签git push origin <tagname># 推送所有本地标签git push origin --tags# 删除一个本地标签git tag -d <tagname># 删除一个远程标签git push origin :refs/tags/<tagname></code></pre><h2 id="自定义Git">自定义Git</h2><h4 id="忽略特殊文件">忽略特殊文件</h4><p><a href="https://github.com/github/gitignore">配置模版</a></p><pre class=" language-language-bash"><code class="language-language-bash"># 强制添加忽略的文件git add -f <filename># 配置全局命令别名git config --global alias.别名 <原命令></code></pre><h3 id="配置文件">配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中。</p><p>当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中。</p><p>配置别名也可以直接修改这个文件。</p><h4 id="搭建Git服务器">搭建Git服务器</h4><p>以Ubuntu为例</p><pre class=" language-language-bash"><code class="language-language-bash"># 安装Gitsudo apt-get install git# 创建git用户sudo adduser git# 创建证书登录，把所有公钥导入到/home/git/.ssh/authorized_keys文件里# 初始化Git仓库，更改权限sudo git init --bare sample.gitsudo chown -R git:git sample.git# 禁用shell登录，编辑/etc/passwd# 将git:x:1001:1001:,,,:/home/git:/bin/bash# 修改为git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell# 克隆远程仓库git clone git@server:/srv/sample.git# 剩下的都一样了# 完成</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>可以不需要中央服务器，在本地有独立的版本库。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>管理记录文件变更的一套方法 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
