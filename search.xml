<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git学习笔记.md</title>
      <link href="/2020/08/20/git-xue-xi-bi-ji-md/"/>
      <url>/2020/08/20/git-xue-xi-bi-ji-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p><a href="https://git-scm.com/">Git</a>是目前世界上最先进的分布式<a href="%E5%8F%AF%E4%BB%A5%E4%B8%8D%E9%9C%80%E8%A6%81%E4%B8%AD%E5%A4%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%89%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%89%88%E6%9C%AC%E5%BA%93%E3%80%82">^1</a>版本控制系统<a href="%E7%AE%A1%E7%90%86%E8%AE%B0%E5%BD%95%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%E7%9A%84%E4%B8%80%E5%A5%97%E6%96%B9%E6%B3%95">^2</a>。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>参考官方下载安装地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建版本库（repository)</span><span class="token comment" spellcheck="true"># 将当前目录变成git管理的仓库</span><span class="token comment" spellcheck="true"># 会在目录下生成一个隐藏的.git目录用于跟踪管理当前仓库</span><span class="token function">git</span> init <span class="token operator">&lt;</span>repositoryname<span class="token operator">></span><span class="token comment" spellcheck="true"># 将文件添加到仓库，需文件已经存在于目录中</span><span class="token function">git</span> add <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 将文件提交到仓库, -m后为说明，可以随便写</span><span class="token function">git</span> commit -m <span class="token string">'message'</span><span class="token comment" spellcheck="true"># 查看文件变更内容</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看工作区的状况</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 查看历史版本记录</span><span class="token function">git</span> log<span class="token comment" spellcheck="true"># 简化输出</span><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline<span class="token comment" spellcheck="true"># 退回到某个版本</span><span class="token comment" spellcheck="true"># HEAD^（^）表示上（上）一个版本</span><span class="token function">git</span> reset --hard commit ID<span class="token comment" spellcheck="true"># 如不记得commit id 可通过下面命令查看历史命令得到</span><span class="token function">git</span> reflog<span class="token comment" spellcheck="true"># 删除文件</span><span class="token comment" spellcheck="true"># 通过其他方式删除的文件也要执行下面命令在git版本库中删除</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token function">file</span><span class="token comment" spellcheck="true">#删除后还需要再commit</span><span class="token comment" spellcheck="true">#如果删错了，并且还没提交到版本库里（版本库里还有）可以通过下面命令恢复。</span><span class="token function">git</span> checkout -- filename</code></pre><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区（Working Directory)就是git管理的可见的当前目录。而隐藏的.git目录就是版本库（Repository).</p><p>版本库中包含的很重要的一部分就是暂存区（stage/index).还有就是master分支及其指针（HEAD)。</p><p><img src="https://i.loli.net/2020/08/20/G6uhk45VLrlceXD.jpg" alt="0"></p><p><code>git add</code> 命令就是把文件修改提交到暂存区，<code>git commit</code>就是把暂存区的所有内容提交到当前分支。</p><p>Git跟踪并管理的是修改，而非文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看工作区与版本库中文件的区别</span><span class="token function">git</span> <span class="token function">diff</span> HEAD -- 文件名</code></pre><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 要关联一个远程库，使用命令</span><span class="token function">git</span> remote add origin git@server-name:path/repo-name.git<span class="token comment" spellcheck="true"># 关联后第一次推送</span><span class="token function">git</span> push -u origin master<span class="token comment" spellcheck="true">#之后推送</span><span class="token function">git</span> push origin master<span class="token comment" spellcheck="true"># 从远程库克隆</span><span class="token function">git</span> clone git@server-name:path/repo-name.git<span class="token comment" spellcheck="true"># 查看远程仓库信息</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 查看更详细的信息</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 推送分支</span><span class="token comment" spellcheck="true"># 如果失败，先用git pull抓取远程的新提交</span><span class="token function">git</span> push origin branch-name<span class="token comment" spellcheck="true"># 在本地创建和远程对应的分支，使用</span><span class="token function">git</span> checkout -b branch-name origin/brance-name<span class="token comment" spellcheck="true"># 建立本地分支与远程分支的关联</span><span class="token function">git</span> branch --set-upstream branch-name origin/branch-name<span class="token comment" spellcheck="true"># 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突</span><span class="token comment" spellcheck="true"># rebase操作可以把本地未push的分叉提交历史整理成直线</span><span class="token function">git</span> rebase</code></pre><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 创建分支</span><span class="token function">git</span> branch <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 切换分支 2种命令效果一样</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token function">git</span> switch <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 创建并切换分支 下面2个命令效果一样</span><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token function">git</span> switch -c <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 合并某分支到当前分支</span><span class="token function">git</span> merge <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除分支</span><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 丢弃一个没有合并过的分支</span><span class="token function">git</span> branch -D <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true"># 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</span><span class="token comment" spellcheck="true"># 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</span><span class="token comment" spellcheck="true"># 用下面命令可以查看分支合并图</span><span class="token function">git</span> log --graph<span class="token comment" spellcheck="true"># 通常Git默认会采用Fast forward模式进行合并，但这样会丢掉分支信息。</span><span class="token comment" spellcheck="true"># 可以在合并时通过下面的参数禁用Fast forward模式采用普通模式，保留分支信息。</span><span class="token comment" spellcheck="true"># 通过普通模式会创建一个新的commit,所以还需要添加-m参数及说明信息</span><span class="token function">git</span> merge --no-ff -m <span class="token string">'massage'</span><span class="token comment" spellcheck="true"># 当某个分支的工作还没完成（还不能提交）但需去其他分支工作时可以用下面命令暂存工作现场</span><span class="token function">git</span> stash<span class="token comment" spellcheck="true"># 需要从暂存区恢复的命令</span><span class="token function">git</span> stash pop<span class="token comment" spellcheck="true"># 要把其他分支的修改（如Bug修复），同步应用的当前工作分支.</span><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit id<span class="token operator">></span></code></pre><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建一个标签，默认是HEAD，也可以指定一个commit id</span><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span class="token comment" spellcheck="true"># 指定标签信息</span><span class="token function">git</span> tag -a <span class="token operator">&lt;</span>tagname<span class="token operator">></span> -m <span class="token string">'blablabla'</span><span class="token comment" spellcheck="true"># 查看所有标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 查看标签信息</span><span class="token function">git</span> show <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span class="token comment" spellcheck="true"># 推送一个本地标签</span><span class="token function">git</span> push origin <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span class="token comment" spellcheck="true"># 推送所有本地标签</span><span class="token function">git</span> push origin --tags<span class="token comment" spellcheck="true"># 删除一个本地标签</span><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tagname<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除一个远程标签</span><span class="token function">git</span> push origin :refs/tags/<span class="token operator">&lt;</span>tagname<span class="token operator">></span></code></pre><h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h4 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h4><p><a href="https://github.com/github/gitignore">配置模版</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 强制添加忽略的文件</span><span class="token function">git</span> add -f <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment" spellcheck="true"># 配置全局命令别名</span><span class="token function">git</span> config --global alias.别名 <span class="token operator">&lt;</span>原命令<span class="token operator">></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中。</p><p>当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中。</p><p>配置别名也可以直接修改这个文件。</p><h4 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h4><p>以Ubuntu为例</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装Git</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span class="token comment" spellcheck="true"># 创建git用户</span><span class="token function">sudo</span> adduser <span class="token function">git</span><span class="token comment" spellcheck="true"># 创建证书登录，把所有公钥导入到/home/git/.ssh/authorized_keys文件里</span><span class="token comment" spellcheck="true"># 初始化Git仓库，更改权限</span><span class="token function">sudo</span> <span class="token function">git</span> init --bare sample.git<span class="token function">sudo</span> <span class="token function">chown</span> -R git:git sample.git<span class="token comment" spellcheck="true"># 禁用shell登录，编辑/etc/passwd</span><span class="token comment" spellcheck="true"># 将</span>git:x:1001:1001:,,,:/home/git:/bin/bash<span class="token comment" spellcheck="true"># 修改为</span>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell<span class="token comment" spellcheck="true"># 克隆远程仓库</span><span class="token function">git</span> clone git@server:/srv/sample.git<span class="token comment" spellcheck="true"># 剩下的都一样了</span><span class="token comment" spellcheck="true"># 完成</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
